package util

import (
	"fmt"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/labstack/echo/v5"
	"github.com/pocketbase/pocketbase/apis"
	"strconv"
)

type LoadType int64

const (
	LoadInt LoadType = iota
	LoadString
)

type ValidationFunc func(value interface{}) error

// PackRules packs multiple validation.Rule into one ValidationFunc used for ValidateAndLoadParam
func PackRules(rules ...validation.Rule) ValidationFunc {
	return func(value interface{}) error {
		return validation.Validate(value, rules...)
	}
}

type ValidationData struct {
	LoadType       LoadType
	Required       bool
	ValidationFunc ValidationFunc
}

// ValidateAndLoadParam loads every value out of the form attached to the request.
// Additionally, it validates the data by the given ValidationFunc and converts the value into the given LoadType
// ValidationFunc is generated by packing a set of validation.Rule using PackRules
func ValidateAndLoadParam(rules map[string]ValidationData) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			for key, data := range rules {
				if c.FormValue(key) == "" {
					if data.Required {
						return apis.NewBadRequestError(fmt.Sprintf("%s can't be empty!", key), nil)
					}
					continue
				}
				switch data.LoadType {
				case LoadString:
					value := c.FormValue(key)
					err := data.ValidationFunc(value)
					if err != nil {
						return apis.NewBadRequestError(err.Error(), nil)
					}
					c.Set(key, value)
					break
				case LoadInt:
					value, err := strconv.Atoi(c.FormValue(key))
					if err != nil {
						return apis.NewBadRequestError(key+" is not an int", nil)
					}
					err = data.ValidationFunc(value)
					if err != nil {
						return apis.NewBadRequestError(err.Error(), nil)
					}
					c.Set(key, value)
					break
				default:
					return apis.NewApiError(500, "Invalid param type", nil)
				}
			}
			return next(c)
		}
	}
}
