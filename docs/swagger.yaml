basePath: /api
definitions:
  aredl.HistoryEntry:
    properties:
      action:
        enum:
        - placed
        - placedAbove
        - movedUp
        - movedDown
        - movedPastUp
        - movedPastDown
        - movedToLegacy
        - movedFromLegacy
        type: string
      cause:
        properties:
          id:
            type: string
          level_id:
            type: integer
          name:
            type: string
        type: object
      new_position:
        type: integer
      timestamp:
        $ref: '#/definitions/types.DateTime'
    type: object
  aredl.Leaderboard:
    properties:
      list:
        items:
          properties:
            points:
              type: number
            rank:
              type: integer
            user:
              properties:
                country:
                  type: string
                global_name:
                  type: string
                id:
                  type: string
              type: object
          type: object
        type: array
      page:
        type: integer
      pages:
        type: integer
    type: object
  aredl.Level:
    properties:
      creators:
        items:
          $ref: '#/definitions/aredl.LevelUser'
        type: array
      custom_song:
        type: string
      id:
        type: string
      legacy:
        type: boolean
      level_id:
        type: integer
      level_password:
        type: string
      name:
        type: string
      packs:
        items:
          $ref: '#/definitions/aredl.LevelPack'
        type: array
      points:
        type: number
      position:
        type: integer
      publisher:
        $ref: '#/definitions/aredl.LevelUser'
      records:
        items:
          $ref: '#/definitions/aredl.LevelRecord'
        type: array
      verification:
        $ref: '#/definitions/aredl.LevelRecord'
    type: object
  aredl.LevelPack:
    properties:
      color:
        type: string
      id:
        type: string
      name:
        type: string
      points:
        type: number
    type: object
  aredl.LevelRecord:
    properties:
      id:
        type: string
      mobile:
        type: boolean
      submitted_by:
        $ref: '#/definitions/aredl.LevelUser'
      video_url:
        type: string
    type: object
  aredl.LevelUser:
    properties:
      global_name:
        type: string
      id:
        type: string
    type: object
  aredl.ListEntry:
    properties:
      id:
        type: string
      legacy:
        type: boolean
      level_id:
        type: integer
      name:
        type: string
      points:
        type: number
      position:
        type: integer
      two_player:
        type: boolean
    type: object
  aredl.MeSubmission:
    properties:
      additional_notes:
        type: string
      created:
        $ref: '#/definitions/types.DateTime'
      id:
        type: string
      is_update:
        type: boolean
      ldm_id:
        type: integer
      level:
        properties:
          id:
            type: string
          level_id:
            type: integer
          name:
            type: string
        type: object
      mobile:
        type: boolean
      priority:
        type: boolean
      raw_footage:
        type: string
      rejected:
        type: boolean
      updated:
        $ref: '#/definitions/types.DateTime'
      video_url:
        type: string
    type: object
  aredl.NameUser:
    properties:
      global_name:
        type: string
      id:
        type: string
    type: object
  aredl.Pack:
    properties:
      color:
        type: string
      id:
        type: string
      levels:
        items:
          properties:
            id:
              type: string
            legacy:
              type: boolean
            level_id:
              type: integer
            name:
              type: string
            points:
              type: number
            position:
              type: integer
          type: object
        type: array
      name:
        type: string
      points:
        type: number
    type: object
  aredl.Record:
    properties:
      created:
        $ref: '#/definitions/types.DateTime'
      id:
        type: string
      ldm_id:
        type: integer
      level:
        properties:
          id:
            type: string
          level_id:
            type: integer
          name:
            type: string
        type: object
      mobile:
        type: boolean
      raw_footage:
        type: string
      updated:
        $ref: '#/definitions/types.DateTime'
      video_url:
        type: string
    type: object
  aredl.Submission:
    properties:
      additional_notes:
        type: string
      created:
        $ref: '#/definitions/types.DateTime'
      id:
        type: string
      is_update:
        type: boolean
      ldm_id:
        type: integer
      level:
        properties:
          id:
            type: string
          level_id:
            type: integer
          name:
            type: string
        type: object
      mobile:
        type: boolean
      priority:
        type: boolean
      raw_footage:
        type: string
      rejected:
        type: boolean
      reviewer:
        properties:
          global_name:
            type: string
          id:
            type: string
        type: object
      submitted_by:
        properties:
          global_name:
            type: string
          id:
            type: string
        type: object
      updated:
        $ref: '#/definitions/types.DateTime'
      video_url:
        type: string
    type: object
  aredl.User:
    properties:
      aredl_verified:
        type: boolean
      avatar_url:
        type: string
      badges:
        type: string
      banned_from_list:
        type: boolean
      banner_color:
        type: string
      country:
        type: string
      created_levels:
        items:
          properties:
            id:
              type: string
            legacy:
              type: boolean
            level_id:
              type: integer
            name:
              type: string
            points:
              type: number
            position:
              type: integer
            two_player:
              type: boolean
          type: object
        type: array
      description:
        type: string
      discord_id:
        type: string
      global_name:
        type: string
      id:
        type: string
      joined:
        $ref: '#/definitions/types.DateTime'
      linked_twitch:
        type: string
      linked_twitter:
        type: string
      linked_youtube:
        type: string
      packs:
        items:
          properties:
            color:
              type: string
            id:
              type: string
            name:
              type: string
            points:
              type: number
          type: object
        type: array
      placeholder:
        type: boolean
      published_levels:
        items:
          properties:
            id:
              type: string
            legacy:
              type: boolean
            level_id:
              type: integer
            name:
              type: string
            points:
              type: number
            position:
              type: integer
            two_player:
              type: boolean
          type: object
        type: array
      rank:
        properties:
          points:
            type: number
          position:
            type: integer
        type: object
      records:
        items:
          properties:
            level:
              properties:
                id:
                  type: string
                legacy:
                  type: boolean
                level_id:
                  type: integer
                name:
                  type: string
                points:
                  type: number
                position:
                  type: integer
                two_player:
                  type: boolean
              type: object
            mobile:
              type: boolean
            placement_order:
              type: integer
            video_url:
              type: string
          type: object
        type: array
      roles:
        items:
          type: string
        type: array
    type: object
  global.ApiKeyResponse:
    properties:
      api_key:
        type: string
      newly_generated:
        type: boolean
    type: object
  global.CreatePlaceholderResponse:
    properties:
      id:
        type: string
    type: object
  global.NameChangeRequest:
    properties:
      id:
        type: string
      new_name:
        type: string
      user:
        properties:
          id:
            type: string
          name:
            type: string
        type: object
    type: object
  global.UserEntry:
    properties:
      global_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  middlewares.PermissionData:
    properties:
      affected_roles:
        items:
          type: string
        type: array
    type: object
  types.DateTime:
    type: object
  util.ErrorResponse:
    properties:
      code:
        type: integer
      data:
        additionalProperties: {}
        type: object
      message:
        type: string
    type: object
host: api.aredl.net
info:
  contact:
    name: Aredl
    url: https://aredl.net/
  description: Backend for the all rated extreme demon list
  title: Aredl API
  version: "1.0"
paths:
  /aredl/leaderboard:
    get:
      description: Gives leaderboard as a paged list ordered by rank. Players with
        zero list points are omitted
      parameters:
      - default: 1
        description: select page
        in: query
        minimum: 1
        name: page
        type: integer
      - description: get the page the given user is on instead of the given page,
          does not work with name filter active
        in: query
        name: user_id
        type: string
      - default: 40
        description: number of results per page
        in: query
        maximum: 200
        minimum: 1
        name: per_page
        type: integer
      - description: filters names to only contain the given substring
        in: query
        name: name_filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aredl.Leaderboard'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Aredl leaderboard
      tags:
      - aredl
  /aredl/leaderboard/refresh:
    post:
      description: |-
        Updates all points. Should be used if other automatic updates didn't work.
        Requires user permission: aredl.update_listpoints
      parameters:
      - description: min list position from what to update
        in: query
        name: min_position
        required: true
        type: integer
      - description: max list position from what to update
        in: query
        name: max_position
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update AREDL points and leaderboard
      tags:
      - aredl
  /aredl/levels:
    get:
      description: Gives a list of every placed level ordered by position. To get
        more details on a level use /aredl/levels/:id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.ListEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Full simple list
      tags:
      - aredl
    post:
      description: |-
        Places a new level into aredl. It automatically updates history and leaderboards
        Requires user permission: aredl.manage_levels
      parameters:
      - collectionFormat: csv
        description: list of all creators using their internal user ids
        in: query
        items:
          type: string
        name: creator_ids
        required: true
        type: array
      - description: gd level id
        in: query
        minimum: 1
        name: level_id
        required: true
        type: integer
      - description: position to place the level at
        in: query
        minimum: 1
        name: position
        required: true
        type: integer
      - description: displayed name of the level
        in: query
        name: name
        required: true
        type: string
      - description: publisher user id
        in: query
        name: publisher
        required: true
        type: string
      - description: gd level password
        in: query
        name: level_password
        type: string
      - default: false
        description: whether the level should be placed as legacy
        in: query
        name: legacy
        type: boolean
      - description: user id of the verifier
        in: query
        name: verification_submitted_by
        required: true
        type: string
      - description: video url of the verification
        format: url
        in: query
        name: verification_video_url
        required: true
        type: string
      - description: whether verification was done on mobile
        in: query
        name: verification_mobile
        required: true
        type: boolean
      - description: verification raw footage
        in: query
        name: verification_raw_footage
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Place AREDL level
      tags:
      - aredl
  /aredl/levels/{id}:
    get:
      description: Detailed information on a level. I naddition optional data such
        as records, creators, verification and packs can be requested.
      operationId: aredl.level
      parameters:
      - description: internal level id or gd level id
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: if level was requested using level_id this specifies whether
          it should load the two player version
        in: query
        name: two_player
        type: boolean
      - default: false
        description: include records
        in: query
        name: records
        type: boolean
      - default: false
        description: include creators
        in: query
        name: creators
        type: boolean
      - default: false
        description: include verification
        in: query
        name: verification
        type: boolean
      - default: false
        description: include packs
        in: query
        name: packs
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aredl.Level'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Level details
      tags:
      - aredl
    patch:
      description: |-
        Updates level data. It automatically updates history and leaderboards.
        Requires user permission: aredl.manage_levels
      parameters:
      - description: internal level id
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        description: list of all creators using their internal user ids
        in: query
        items:
          type: string
        name: creator_ids
        type: array
      - description: gd level id
        in: query
        minimum: 1
        name: level_id
        type: integer
      - description: position to move to if different form current position
        in: query
        minimum: 1
        name: position
        type: integer
      - description: displayed name of the level
        in: query
        name: name
        type: string
      - description: publisher user id
        in: query
        name: publisher
        type: string
      - description: gd level password
        in: query
        name: level_password
        type: string
      - description: reference to custom song
        in: query
        name: custom_song
        type: string
      - description: whether the level should be placed as legacy
        in: query
        name: legacy
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update AREDL level
      tags:
      - aredl
  /aredl/levels/{id}/history:
    get:
      description: 'Lists the placement, move & legacy history of a level by either
        using its internal or gd id. Possible actions: placed, placedAbove, movedUp,
        movedDown, movedPastUp, movedPastDown, movedToLegacy, movedFromLegacy'
      parameters:
      - description: internal level id or gd level id
        in: path
        name: id
        required: true
        type: string
      - description: gd level id
        in: query
        minimum: 1
        name: level_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.HistoryEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: History of a level
      tags:
      - aredl
  /aredl/list:
    get:
      description: Use /aredl/levels instead
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.ListEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: (DEPRECATED) Full simple list
      tags:
      - aredl
  /aredl/me/records:
    get:
      description: |-
        Lists records ordered by the time they have been updated last.
        Requires user permission: aredl.user_record_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.Record'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List records
      tags:
      - aredl
  /aredl/me/submissions:
    get:
      description: |-
        Lists submissions ordered by the time they have been updated last.
        Requires user permission: aredl.user_submission_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.MeSubmission'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List submissions
      tags:
      - aredl
    put:
      description: |-
        Creates a submission. If a submission for a level already exists, it will be updated instead. Submissions can only be updated when its status is pending or rejected_retryable
        Requires user permission: aredl.user_submit
        If the user has the permission aredl.priority they will automatically be assigned to the priority queue
      parameters:
      - description: internal level id
        in: query
        name: level
        required: true
        type: string
      - description: display video url
        format: url
        in: query
        name: video_url
        required: true
        type: string
      - description: whether submission was done on mobile
        in: query
        name: mobile
        required: true
        type: boolean
      - description: ldm gd level id if used
        in: query
        name: ldm_id
        type: integer
      - description: raw footage
        format: url
        in: query
        name: raw_footage
        type: string
      - description: additional notes the user wants to add to a submission. Max 100
          characters
        in: query
        name: additional_notes
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or Update submission
      tags:
      - aredl
  /aredl/me/submissions/{id}:
    delete:
      description: |-
        Deletes a submission as long as it still is open for review.
        Requires user permission: aredl.user_submission_delete
      parameters:
      - description: submission id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete submission
      tags:
      - aredl
  /aredl/names:
    get:
      description: Gives a map of important users grouped by their role. This also
        includes aredl plus members
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/aredl.NameUser'
              type: array
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Important users
      tags:
      - aredl
  /aredl/packs:
    get:
      description: Gives a list of all packs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.Pack'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Aredl packs
      tags:
      - aredl
    post:
      description: |-
        Creates a new pack and updates all user points that now have the new pack.
        Requires user permission: aredl.manage_packs
      parameters:
      - description: display name
        in: query
        name: name
        required: true
        type: string
      - description: display color
        in: query
        name: color
        required: true
        type: string
      - description: position of pack
        in: query
        name: placement_order
        type: integer
      - collectionFormat: csv
        description: list of internal level ids. Pack has to have at least two levels
        in: query
        items:
          type: string
        name: levels
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new AREDL pack
      tags:
      - aredl
  /aredl/packs/{id}:
    delete:
      description: |-
        Deletes a pack and updates all user points that now have the new pack.
        Requires user permission: aredl.manage_packs
      parameters:
      - description: internal pack id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an AREDL pack
      tags:
      - aredl
    patch:
      description: |-
        Updates a pack and updates all user points that now have or lost the new pack.
        Requires user permission: aredl.manage_packs
      parameters:
      - description: internal pack id
        in: path
        name: id
        required: true
        type: string
      - description: display name
        in: query
        name: name
        type: string
      - description: display color
        in: query
        name: color
        type: string
      - description: position of pack
        in: query
        name: placement_order
        type: integer
      - collectionFormat: csv
        description: new list of internal level ids. Pack has to have at least two
          levels
        in: query
        items:
          type: string
        name: levels
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a AREDL pack
      tags:
      - aredl
  /aredl/profiles/{id}:
    get:
      description: Gives detailed information about a user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: if the provided id is a discord id
        in: query
        name: is_discord_id
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aredl.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: User info
      tags:
      - aredl
  /aredl/submissions:
    get:
      description: |-
        Lists submissions ordered by the time they have been updated last.
        Requires user permission: aredl.submission_review
      parameters:
      - default: false
        description: include rejected submissions
        in: query
        name: include_rejected
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aredl.Submission'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth:
        - authorization
      summary: List submissions
      tags:
      - aredl
  /aredl/submissions/{id}/accept:
    post:
      description: 'Requires user permission: aredl.submission_review'
      parameters:
      - description: internal submission id
        in: path
        name: id
        required: true
        type: string
      - description: video url
        format: url
        in: query
        name: video_url
        type: string
      - description: whether submisssion was one on mobile
        in: query
        name: mobile
        type: boolean
      - description: gd id of used ldm
        in: query
        name: ldm_id
        type: integer
      - description: raw footage
        format: url
        in: query
        name: raw_footage
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Accept AREDL submission.
      tags:
      - aredl
  /aredl/submissions/{id}/reject:
    post:
      description: 'Requires user permission: aredl.submission_review'
      parameters:
      - description: internal submission id
        in: path
        name: id
        required: true
        type: string
      - description: rejection reason
        in: query
        name: rejection_reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reject AREDL submission.
      tags:
      - aredl
  /me/api-key:
    get:
      description: |-
        Gets the authenticated users api key. If the user does not have one it generates a new one.
        Requires user permission: user_request_api_key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.ApiKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Api Key
      tags:
      - global
  /me/permissions:
    get:
      description: Returns all the available permissions to the authenticated user,
        if there is no authenticaiton provided, the permissions will be empty
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/middlewares.PermissionData'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a list of Permissions
      tags:
      - global
  /merge-requests:
    get:
      description: |-
        Lists all open merge requests
        Requires user permission: user_merge_review
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/global.NameChangeRequest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List name merge requests
      tags:
      - global
    post:
      description: |-
        Creates a merge request for the user with a placeholder user. Needs to be reviewed by a moderator.
        Requires user permission: user_request_merge
      parameters:
      - description: name of the placeholder user to be merged with
        in: query
        name: placeholder_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Merge Request
      tags:
      - global
  /merge-requests/{id}/accept:
    post:
      description: |-
        Accepts and merge request and merges the respective users
        Requires user permission: user_merge_review
      parameters:
      - description: request id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Accept merge request
      tags:
      - global
  /merge-requests/{id}/reject:
    post:
      description: |-
        Rejects merge request
        Requires user permission: user_merge_review
      parameters:
      - description: request id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reject merge request
      tags:
      - global
  /name-change-requests:
    get:
      description: |-
        Lists all open name change requests
        Requires user permission: name_change_review
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/global.NameChangeRequest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List name change requests
      tags:
      - global
    put:
      description: |-
        Creates a name change request for the user. Needs to be reviewed by a moderator.
        Requires user permission: user_request_name_change
      parameters:
      - description: name to change to
        in: query
        name: new_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyAuth:
        - authorization
      summary: Name Change Request
      tags:
      - global
  /name-change-requests/{id}/accept:
    post:
      description: |-
        Accepts a name change request from a user
        Requires user permission: name_change_review
      parameters:
      - description: request id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Accept name change request
      tags:
      - global
  /name-change-requests/{id}/reject:
    post:
      description: |-
        Rejects a name change request from a user
        Requires user permission: name_change_review
      parameters:
      - description: request id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reject name change request
      tags:
      - global
  /users:
    get:
      description: |-
        Paged list of all users filtered by name. Userd to get user ids and select a user for other actions
        Requires user permission: user_list
      parameters:
      - default: 1
        description: select page
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 40
        description: number of results per page. If this is set to -1 it will return
          all users
        in: query
        minimum: -1
        name: per_page
        type: integer
      - description: filters names to only contain the given substring
        in: query
        name: name_filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/global.UserEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - global
  /users/{id}/ban:
    post:
      description: |-
        Bans a user and removes them from the leaderboard
        Requires user permission: user_ban
        Additionally the user needs to be able to affect the user with their permission
      parameters:
      - description: internal user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Ban user
      tags:
      - global
  /users/{id}/role:
    patch:
      description: |-
        Promote or demote a user
        Requires user permission: user_change_role
        Additionally the user needs to be able to affect the user with their permission and give the user the new role
      parameters:
      - description: internal user id
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        description: new roles
        in: query
        items:
          type: string
        name: roles
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Change user role
      tags:
      - global
  /users/{id}/unban:
    post:
      description: |-
        Unbans a user
        Requires user permission: user_ban
        Additionally the user needs to be able to affect the user with their permission
      parameters:
      - description: internal user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Unban user
      tags:
      - global
  /users/merge:
    post:
      description: |-
        Directly merges two users
        Requires user permission: user_merge
      parameters:
      - description: primary user that the data gets merged into
        in: path
        name: primary_id
        required: true
        type: string
      - description: secondary user that gets deleted
        in: query
        name: secondary_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Merge two users
      tags:
      - global
  /users/placeholder:
    post:
      description: |-
        Creates a placeholder user for users that are not registered on the list yet
        Requires user permission: create_placeholder
      parameters:
      - description: display name
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.CreatePlaceholderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a placeholder user
      tags:
      - global
securityDefinitions:
  ApiKeyAuth:
    description: Perform actions as a user. It is also used to access endpoints that
      require user permissions.
    in: header
    name: api-key
    type: apiKey
swagger: "2.0"
